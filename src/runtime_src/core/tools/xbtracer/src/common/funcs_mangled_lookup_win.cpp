#ifdef _WIN32
#include <cstring>

extern "C" {
const char * func_mangled_map[] = {
  "xrt::aie::device::open_context(xrt::aie::device::access_mode)", "?open_context@device@aie@xrt@@AEAAXW4access_mode@23@@Z",
  "xrt::aie::device::read_aie_mem(pid_t, uint16_t, uint16_t, uint16_t, uint32_t, uint32_t)", "?read_aie_mem@device@aie@xrt@@QEBA?AV?$vector@DV?$allocator@D@std@@@std@@HGGGII@Z",
  "xrt::aie::device::read_aie_reg(pid_t, uint16_t, uint16_t, uint16_t, uint32_t)", "?read_aie_reg@device@aie@xrt@@QEBAIHGGGI@Z",
  "xrt::aie::device::write_aie_mem(pid_t, uint16_t, uint16_t, uint16_t, uint32_t, const std::vector<char>&)", "?write_aie_mem@device@aie@xrt@@QEAA_KHGGGIAEBV?$vector@DV?$allocator@D@std@@@std@@@Z",
  "xrt::aie::device::write_aie_reg(pid_t, uint16_t, uint16_t, uint16_t, uint32_t, uint32_t)", "?write_aie_reg@device@aie@xrt@@QEAA_NHGGGII@Z",
  "xrt::aie::program::get_partition_size(void)", "?get_partition_size@program@aie@xrt@@QEBAIXZ",
  "xrt::aie::program::valid_or_error(void)", "?valid_or_error@program@aie@xrt@@AEAAXXZ",
  "xrt::bo::address(void)", "?address@bo@xrt@@QEBA_KXZ",
  "xrt::bo::async(xclBOSyncDirection, size_t, size_t)", "?async@bo@xrt@@QEAA?AVasync_handle@12@W4xclBOSyncDirection@@_K1@Z",
  "xrt::bo::async_handle::wait(void)", "?wait@async_handle@bo@xrt@@QEAAXXZ",
  "xrt::bo::bo(const xrt::bo&, size_t, size_t)", "??0bo@xrt@@QEAA@AEBV01@_K1@Z",
  "xrt::bo::bo(const xrt::device&, size_t, xrt::bo::flags, xrt::memory_group)", "??0bo@xrt@@QEAA@AEBVdevice@1@_KW4flags@01@I@Z",
  "xrt::bo::bo(const xrt::device&, size_t, xrt::memory_group)", "??0bo@xrt@@QEAA@AEBVdevice@1@_KI@Z",
  "xrt::bo::bo(const xrt::device&, void*, size_t, xrt::bo::flags, xrt::memory_group)", "??0bo@xrt@@QEAA@AEBVdevice@1@PEAX_KW4flags@01@I@Z",
  "xrt::bo::bo(const xrt::device&, void*, size_t, xrt::memory_group)", "??0bo@xrt@@QEAA@AEBVdevice@1@PEAX_KI@Z",
  "xrt::bo::bo(const xrt::device&, xrt::bo::export_handle)", "??0bo@xrt@@QEAA@AEBVdevice@1@_K@Z",
  "xrt::bo::bo(const xrt::device&, xrt::pid_type, xrt::bo::export_handle)", "??0bo@xrt@@QEAA@AEBVdevice@1@Upid_type@1@_K@Z",
  "xrt::bo::bo(const xrt::hw_context&, size_t, xrt::bo::flags, xrt::memory_group)", "??0bo@xrt@@QEAA@AEBVhw_context@1@_KW4flags@01@I@Z",
  "xrt::bo::bo(const xrt::hw_context&, size_t, xrt::memory_group)", "??0bo@xrt@@QEAA@AEBVhw_context@1@_KI@Z",
  "xrt::bo::bo(const xrt::hw_context&, void*, size_t, xrt::bo::flags, xrt::memory_group)", "??0bo@xrt@@QEAA@AEBVhw_context@1@PEAX_KW4flags@01@I@Z",
  "xrt::bo::bo(const xrt::hw_context&, void*, size_t, xrt::memory_group)", "??0bo@xrt@@QEAA@AEBVhw_context@1@PEAX_KI@Z",
  "xrt::bo::bo(xclDeviceHandle, size_t, xrt::bo::flags, xrt::memory_group)", "??0bo@xrt@@QEAA@PEAX_KW4flags@01@I@Z",
  "xrt::bo::bo(xclDeviceHandle, void*, size_t, xrt::bo::flags, xrt::memory_group)", "??0bo@xrt@@QEAA@PEAX0_KW4flags@01@I@Z",
  "xrt::bo::bo(xclDeviceHandle, xclBufferExportHandle)", "??0bo@xrt@@QEAA@PEAX_K@Z",
  "xrt::bo::bo(xclDeviceHandle, xcl_buffer_handle)", "??0bo@xrt@@QEAA@PEAXUxcl_buffer_handle@@@Z",
  "xrt::bo::bo(xclDeviceHandle, xrt::pid_type, xclBufferExportHandle)", "??0bo@xrt@@QEAA@PEAXUpid_type@1@_K@Z",
  "xrt::bo::bo(xrtBufferHandle)", "??0bo@xrt@@QEAA@PEAX@Z",
  "xrt::bo::copy(const xrt::bo&, size_t, size_t, size_t)", "?copy@bo@xrt@@QEAAXAEBV12@_K11@Z",
  "xrt::bo::export_buffer(void)", "?export_buffer@bo@xrt@@QEAA_KXZ",
  "xrt::bo::get_flags(void)", "?get_flags@bo@xrt@@QEBA?AW4flags@12@XZ",
  "xrt::bo::get_memory_group(void)", "?get_memory_group@bo@xrt@@QEBAIXZ",
  "xrt::bo::map(void)", "?map@bo@xrt@@QEAAPEAXXZ",
  "xrt::bo::read(void*, size_t, size_t)", "?read@bo@xrt@@QEAAXPEAX_K1@Z",
  "xrt::bo::size(void)", "?size@bo@xrt@@QEBA_KXZ",
  "xrt::bo::sync(xclBOSyncDirection, size_t, size_t)", "?sync@bo@xrt@@QEAAXW4xclBOSyncDirection@@_K1@Z",
  "xrt::bo::write(const void*, size_t, size_t)", "?write@bo@xrt@@QEAAXPEBX_K1@Z",
  "xrt::bo::~bo(void)", "??1bo@xrt@@QEAA@XZ",
  "xrt::device::device(const std::string&)", "??0device@xrt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::device::device(unsigned int)", "??0device@xrt@@QEAA@I@Z",
  "xrt::device::device(xclDeviceHandle)", "??0device@xrt@@QEAA@PEAX@Z",
  "xrt::device::error::error(const std::string&)", "??0error@device@xrt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::device::error::what(void)", "?what@error@device@xrt@@UEBAPEBDXZ",
  "xrt::device::get_info(xrt::info::device)", "?get_info@device@xrt@@AEBA?AVany@boost@@W41info@2@@Z",
  "xrt::device::get_info(xrt::info::device, const xrt::detail::abi&)", "?get_info@device@xrt@@AEBA?AVany@boost@@W41info@2@AEBUabi@detail@2@@Z",
  "xrt::device::get_info_std(xrt::info::device, const xrt::detail::abi&)", "?get_info_std@device@xrt@@AEBA?AVany@std@@W41info@2@AEBUabi@detail@2@@Z",
  "xrt::device::get_xclbin_section(axlf_section_kind, const xrt::uuid&)", "?get_xclbin_section@device@xrt@@AEBA?AU?$pair@PEBD_K@std@@W4axlf_section_kind@@AEBVuuid@2@@Z",
  "xrt::device::get_xclbin_uuid(void)", "?get_xclbin_uuid@device@xrt@@QEBA?AVuuid@2@XZ",
  "xrt::device::load_xclbin(const axlf*)", "?load_xclbin@device@xrt@@QEAA?AVuuid@2@PEBUaxlf@@@Z",
  "xrt::device::load_xclbin(const std::string&)", "?load_xclbin@device@xrt@@QEAA?AVuuid@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::device::load_xclbin(const xrt::xclbin&)", "?load_xclbin@device@xrt@@QEAA?AVuuid@2@AEBVxclbin@2@@Z",
  "xrt::device::operator xclDeviceHandle(void)", "??Bdevice@xrt@@QEBAPEAXXZ",
  "xrt::device::register_xclbin(const xrt::xclbin&)", "?register_xclbin@device@xrt@@QEAA?AVuuid@2@AEBVxclbin@2@@Z",
  "xrt::device::reset(void)", "?reset@device@xrt@@QEAAXXZ",
  "xrt::device::~device(void)", "??1device@xrt@@QEAA@XZ",
  "xrt::elf::elf(const std::string&)", "??0elf@xrt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::elf::elf(const void *, size_t)", "??0elf@xrt@@QEAA@PEBX_K@Z",
  "xrt::elf::elf(std::istream&)", "??0elf@xrt@@QEAA@AEAV?$basic_istream@DU?$char_traits@D@std@@@std@@@Z",
  "xrt::elf::get_cfg_uuid(void)", "?get_cfg_uuid@elf@xrt@@QEBA?AVuuid@2@XZ",
  "xrt::error::error(const xrt::device&, xrtErrorClass)", "??0error@xrt@@QEAA@AEBVdevice@1@W4xrtErrorClass@@@Z",
  "xrt::error::error(xrtErrorCode, xrtErrorTime)", "??0error@xrt@@QEAA@_K0@Z",
  "xrt::error::get_error_code(void)", "?get_error_code@error@xrt@@QEBA_KXZ",
  "xrt::error::get_timestamp(void)", "?get_timestamp@error@xrt@@QEBA_KXZ",
  "xrt::error::to_string(void)", "?to_string@error@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::ext::bo::bo(const xrt::device&, size_t)", "??0bo@ext@xrt@@QEAA@AEBVdevice@2@_K@Z",
  "xrt::ext::bo::bo(const xrt::device&, size_t, xrt::ext::bo::access_mode)", "??0bo@ext@xrt@@QEAA@AEBVdevice@2@_KW4access_mode@012@@Z",
  "xrt::ext::bo::bo(const xrt::device&, void*, size_t)", "??0bo@ext@xrt@@QEAA@AEBVdevice@2@PEAX_K@Z",
  "xrt::ext::bo::bo(const xrt::device&, void*, size_t, xrt::ext::bo::access_mode)", "??0bo@ext@xrt@@QEAA@AEBVdevice@2@PEAX_KW4access_mode@012@@Z",
  "xrt::ext::bo::bo(const xrt::device&, xrt::pid_type, xrt::bo::export_handle)", "??0bo@ext@xrt@@QEAA@AEBVdevice@2@Upid_type@2@_K@Z",
  "xrt::ext::bo::bo(const xrt::hw_context&, size_t)", "??0bo@ext@xrt@@QEAA@AEBVhw_context@2@_K@Z",
  "xrt::ext::bo::bo(const xrt::hw_context&, size_t, xrt::ext::bo::access_mode)", "??0bo@ext@xrt@@QEAA@AEBVhw_context@2@_KW4access_mode@012@@Z",
  "xrt::ext::bo::bo(const xrt::hw_context&, xrt::pid_type, xrt::bo::export_handle)", "??0bo@ext@xrt@@QEAA@AEBVhw_context@2@Upid_type@2@_K@Z",
  "xrt::ext::kernel::kernel(const xrt::hw_context&, const std::string&)", "??0kernel@ext@xrt@@QEAA@AEBVhw_context@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::ext::kernel::kernel(const xrt::hw_context&, const xrt::module&, const std::string&)", "??0kernel@ext@xrt@@QEAA@AEBVhw_context@2@AEBVmodule@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::fence::export_fence(void)", "?export_fence@fence@xrt@@QEAA_KXZ",
  "xrt::fence::fence(const xrt::device&, xrt::fence::access_mode)", "??0fence@xrt@@QEAA@AEBVdevice@1@W4access_mode@01@@Z",
  "xrt::fence::fence(const xrt::device&, xrt::pid_type, xrt::fence::export_handle)", "??0fence@xrt@@QEAA@AEBVdevice@1@Upid_type@1@_K@Z",
  "xrt::fence::fence(const xrt::fence&)", "??0fence@xrt@@QEAA@AEBV01@@Z",
  "xrt::fence::fence(std::unique_ptr<xrt_core::fence_handle>)", "??0fence@xrt@@QEAA@V?$unique_ptr@Vfence_handle@xrt_core@@U?$default_delete@Vfence_handle@xrt_core@@@std@@@std@@@Z",
  "xrt::fence::fence(xrt::fence&&)", "??0fence@xrt@@QEAA@$$QEAV01@@Z",
  "xrt::fence::get_access_mode(void)", "?get_access_mode@fence@xrt@@QEBA?AW4access_mode@12@XZ",
  "xrt::fence::get_next_state(void)", "?get_next_state@fence@xrt@@QEBA_KXZ",
  "xrt::fence::wait(const std::chrono::milliseconds&)", "?wait@fence@xrt@@QEAA?AW4cv_status@std@@AEBV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@4@@Z",
  "xrt::hw_context::add_config(const xrt::elf&)", "?add_config@hw_context@xrt@@QEAAXAEBVelf@2@@Z",
  "xrt::hw_context::get_device(void)", "?get_device@hw_context@xrt@@QEBA?AVdevice@2@XZ",
  "xrt::hw_context::get_mode(void)", "?get_mode@hw_context@xrt@@QEBA?AW4access_mode@12@XZ",
  "xrt::hw_context::get_xclbin(void)", "?get_xclbin@hw_context@xrt@@QEBA?AVxclbin@2@XZ",
  "xrt::hw_context::get_xclbin_uuid(void)", "?get_xclbin_uuid@hw_context@xrt@@QEBA?AVuuid@2@XZ",
  "xrt::hw_context::hw_context(const xrt::device&, const xrt::elf&)", "??0hw_context@xrt@@QEAA@AEBVdevice@1@AEBVelf@1@@Z",
  "xrt::hw_context::hw_context(const xrt::device&, const xrt::elf&, const xrt::hw_context::cfg_param_type&, xrt::hw_context::access_mode)", "??0hw_context@xrt@@QEAA@AEBVdevice@1@AEBVelf@1@AEBV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@W4access_mode@01@@Z",
  "xrt::hw_context::hw_context(const xrt::device&, const xrt::hw_context::cfg_param_type&, xrt::hw_context::access_mode)", "??0hw_context@xrt@@QEAA@AEBVdevice@1@AEBV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@W4access_mode@01@@Z",
  "xrt::hw_context::hw_context(const xrt::device&, const xrt::uuid&, const xrt::hw_context::cfg_param_type&)", "??0hw_context@xrt@@QEAA@AEBVdevice@1@AEBVuuid@1@AEBV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@@Z",
  "xrt::hw_context::hw_context(const xrt::device&, const xrt::uuid&, xrt::hw_context::access_mode)", "??0hw_context@xrt@@QEAA@AEBVdevice@1@AEBVuuid@1@W4access_mode@01@@Z",
  "xrt::hw_context::operator xrt_core::hwctx_handle*(void)", "??Bhw_context@xrt@@QEBAPEAVhwctx_handle@xrt_core@@XZ",
  "xrt::hw_context::update_qos(const xrt::hw_context::qos_type&)", "?update_qos@hw_context@xrt@@QEAAXAEBV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@std@@@2@@std@@@Z",
  "xrt::hw_context::~hw_context(void)", "??1hw_context@xrt@@QEAA@XZ",
  "xrt::ini::set(const std::string&, const std::string&)", "?set@ini@xrt@@YAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z",
  "xrt::ip::create_interrupt_notify(void)", "?create_interrupt_notify@ip@xrt@@QEAA?AVinterrupt@12@XZ",
  "xrt::ip::interrupt::disable(void)", "?disable@interrupt@ip@xrt@@QEAAXXZ",
  "xrt::ip::interrupt::enable(void)", "?enable@interrupt@ip@xrt@@QEAAXXZ",
  "xrt::ip::interrupt::wait(const std::chrono::milliseconds&)", "?wait@interrupt@ip@xrt@@QEBA?AW4cv_status@std@@AEBV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@5@@Z",
  "xrt::ip::interrupt::wait(void)", "?wait@interrupt@ip@xrt@@QEAAXXZ",
  "xrt::ip::ip(const xrt::device&, const xrt::uuid&, const std::string&)", "??0ip@xrt@@QEAA@AEBVdevice@1@AEBVuuid@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::ip::ip(const xrt::hw_context&, const std::string&)", "??0ip@xrt@@QEAA@AEBVhw_context@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::ip::read_register(uint32_t)", "?read_register@ip@xrt@@QEBAII@Z",
  "xrt::ip::write_register(uint32_t, uint32_t)", "?write_register@ip@xrt@@QEAAXII@Z",
  "xrt::kernel::get_name(void)", "?get_name@kernel@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::kernel::get_xclbin(void)", "?get_xclbin@kernel@xrt@@QEBA?AVxclbin@2@XZ",
  "xrt::kernel::group_id(int)", "?group_id@kernel@xrt@@QEBAHH@Z",
  "xrt::kernel::kernel(const xrt::device&, const xrt::uuid&, const std::string&, xrt::kernel::cu_access_mode)", "??0kernel@xrt@@QEAA@AEBVdevice@1@AEBVuuid@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4cu_access_mode@01@@Z",
  "xrt::kernel::kernel(const xrt::hw_context&, const std::string&)", "??0kernel@xrt@@QEAA@AEBVhw_context@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::kernel::kernel(xclDeviceHandle, const xrt::uuid&, const std::string&, xrt::kernel::cu_access_mode)", "??0kernel@xrt@@QEAA@PEAXAEBVuuid@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4cu_access_mode@01@@Z",
  "xrt::kernel::offset(int)", "?offset@kernel@xrt@@QEBAIH@Z",
  "xrt::kernel::read_register(uint32_t)", "?read_register@kernel@xrt@@QEBAII@Z",
  "xrt::kernel::write_register(uint32_t, uint32_t)", "?write_register@kernel@xrt@@QEAAXII@Z",
  "xrt::kernel::~kernel(void)", "??1kernel@xrt@@QEAA@XZ",
  "xrt::mailbox::get_arg(int)", "?get_arg@mailbox@xrt@@QEBA?AU?$pair@PEBX_K@std@@H@Z",
  "xrt::mailbox::get_arg_index(const std::string&)", "?get_arg_index@mailbox@xrt@@AEBAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::mailbox::mailbox(const xrt::run&)", "??0mailbox@xrt@@QEAA@AEBVrun@1@@Z",
  "xrt::mailbox::read(void)", "?read@mailbox@xrt@@QEAAXXZ",
  "xrt::mailbox::set_arg_at_index(int, const void*, size_t)", "?set_arg_at_index@mailbox@xrt@@AEAAXHPEBX_K@Z",
  "xrt::mailbox::set_arg_at_index(int, const xrt::bo&)", "?set_arg_at_index@mailbox@xrt@@AEAAXHAEBVbo@2@@Z",
  "xrt::mailbox::write(void)", "?write@mailbox@xrt@@QEAAXXZ",
  "xrt::message::detail::enabled(xrt::message::level)", "?enabled@detail@message@xrt@@YA_NW4level@23@@Z",
  "xrt::message::log(xrt::message::level, const std::string&, const std::string&)", "?log@message@xrt@@YAXW4level@12@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@1@Z",
  "xrt::module::get_cfg_uuid(void)", "?get_cfg_uuid@module@xrt@@QEBA?AVuuid@2@XZ",
  "xrt::module::get_hw_context(void)", "?get_hw_context@module@xrt@@QEBA?AVhw_context@2@XZ",
  "xrt::module::module(const xrt::elf&)", "??0module@xrt@@QEAA@AEBVelf@1@@Z",
  "xrt::module::module(const xrt::module&, const xrt::hw_context&)", "??0module@xrt@@QEAA@AEBV01@AEBVhw_context@1@@Z",
  "xrt::module::module(void*, size_t, const xrt::uuid&)", "??0module@xrt@@QEAA@PEAX_KAEBVuuid@1@@Z",
  "xrt::operator==(const xrt::device&, const xrt::device&)", "??8xrt@@YA_NAEBVdevice@0@0@Z",
  "xrt::profile::user_event::mark(const char*)", "?mark@user_event@profile@xrt@@QEAAXPEBD@Z",
  "xrt::profile::user_event::mark_time_ns(const std::chrono::nanoseconds&, const char*)", "?mark_time_ns@user_event@profile@xrt@@QEAAXAEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@chrono@std@@PEBD@Z",
  "xrt::profile::user_event::user_event(void)", "??0user_event@profile@xrt@@QEAA@XZ",
  "xrt::profile::user_event::~user_event(void)", "??1user_event@profile@xrt@@QEAA@XZ",
  "xrt::profile::user_range::end(void)", "?end@user_range@profile@xrt@@QEAAXXZ",
  "xrt::profile::user_range::start(const char*, const char*)", "?start@user_range@profile@xrt@@QEAAXPEBD0@Z",
  "xrt::profile::user_range::user_range(const char*, const char*)", "??0user_range@profile@xrt@@QEAA@PEBD0@Z",
  "xrt::profile::user_range::user_range(void)", "??0user_range@profile@xrt@@QEAA@XZ",
  "xrt::profile::user_range::~user_range(void)", "??1user_range@profile@xrt@@QEAA@XZ",
  "xrt::queue::add_task(xrt::queue::task&&)", "?add_task@queue@xrt@@AEAAX$$QEAVtask@12@@Z",
  "xrt::queue::queue(void)", "??0queue@xrt@@QEAA@XZ",
  "xrt::run::abort(void)", "?abort@run@xrt@@QEAA?AW4ert_cmd_state@@XZ",
  "xrt::run::add_callback(ert_cmd_state, std::function<void(const void*, ert_cmd_state, void*)>, void*)", "?add_callback@run@xrt@@QEAAXW4ert_cmd_state@@V?$function@$$A6AXPEBXW4ert_cmd_state@@PEAX@Z@std@@PEAX@Z",
  "xrt::run::aie_error::aie_error(const xrt::run&, const std::string&)", "??0aie_error@run@xrt@@QEAA@AEBV12@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::run::aie_error::data(void)", "?data@aie_error@run@xrt@@QEBA?AV?$span@$$CBI@detail@3@XZ",
  "xrt::run::command_error::command_error(const xrt::run&, const std::string&)", "??0command_error@run@xrt@@QEAA@AEBV12@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::run::command_error::command_error(ert_cmd_state, const std::string&)", "??0command_error@run@xrt@@QEAA@W4ert_cmd_state@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::run::command_error::get_command_state(void)", "?get_command_state@command_error@run@xrt@@QEBA?AW4ert_cmd_state@@XZ",
  "xrt::run::command_error::what(void)", "?what@command_error@run@xrt@@UEBAPEBDXZ",
  "xrt::run::get_arg_index(const std::string&)", "?get_arg_index@run@xrt@@AEBAHAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::run::get_ctrl_scratchpad_bo(void)", "?get_ctrl_scratchpad_bo@run@xrt@@QEBA?AVbo@2@XZ",
  "xrt::run::get_ert_packet(void)", "?get_ert_packet@run@xrt@@QEBAPEAUert_packet@@XZ",
  "xrt::run::return_code(void)", "?return_code@run@xrt@@QEBAIXZ",
  "xrt::run::run(const xrt::kernel&)", "??0run@xrt@@QEAA@AEBVkernel@1@@Z",
  "xrt::run::set_arg_at_index(int, const void*, size_t)", "?set_arg_at_index@run@xrt@@AEAAXHPEBX_K@Z",
  "xrt::run::set_arg_at_index(int, const xrt::bo&)", "?set_arg_at_index@run@xrt@@AEAAXHAEBVbo@2@@Z",
  "xrt::run::start(const xrt::autostart&)", "?start@run@xrt@@QEAAXAEBUautostart@2@@Z",
  "xrt::run::start(void)", "?start@run@xrt@@QEAAXXZ",
  "xrt::run::state(void)", "?state@run@xrt@@QEBA?AW4ert_cmd_state@@XZ",
  "xrt::run::stop(void)", "?stop@run@xrt@@QEAAXXZ",
  "xrt::run::submit_signal(const xrt::fence&)", "?submit_signal@run@xrt@@QEAAXAEBVfence@2@@Z",
  "xrt::run::submit_wait(const xrt::fence&)", "?submit_wait@run@xrt@@QEAAXAEBVfence@2@@Z",
  "xrt::run::update_arg_at_index(int, const void*, size_t)", "?update_arg_at_index@run@xrt@@AEAAXHPEBX_K@Z",
  "xrt::run::update_arg_at_index(int, const xrt::bo&)", "?update_arg_at_index@run@xrt@@AEAAXHAEBVbo@2@@Z",
  "xrt::run::wait(const std::chrono::milliseconds&)", "?wait@run@xrt@@QEBA?AW4ert_cmd_state@@AEBV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@std@@@Z",
  "xrt::run::wait2(const std::chrono::milliseconds&)", "?wait2@run@xrt@@QEBA?AW4cv_status@std@@AEBV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@4@@Z",
  "xrt::run::~run(void)", "??1run@xrt@@QEAA@XZ",
  "xrt::runlist::add(const xrt::run&)", "?add@runlist@xrt@@QEAAXAEBVrun@2@@Z",
  "xrt::runlist::add(xrt::run&&)", "?add@runlist@xrt@@QEAAX$$QEAVrun@2@@Z",
  "xrt::runlist::aie_error::aie_error(const xrt::run&, ert_cmd_state, const std::string&)", "??0aie_error@runlist@xrt@@QEAA@AEBVrun@2@W4ert_cmd_state@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::runlist::aie_error::data(void)", "?data@aie_error@runlist@xrt@@QEBA?AV?$span@$$CBI@detail@3@XZ",
  "xrt::runlist::command_error::command_error(const xrt::run&, ert_cmd_state, const std::string&)", "??0command_error@runlist@xrt@@QEAA@AEBVrun@2@W4ert_cmd_state@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::runlist::command_error::get_command_state(void)", "?get_command_state@command_error@runlist@xrt@@QEBA?AW4ert_cmd_state@@XZ",
  "xrt::runlist::command_error::get_run(void)", "?get_run@command_error@runlist@xrt@@QEBA?AVrun@3@XZ",
  "xrt::runlist::command_error::what(void)", "?what@command_error@runlist@xrt@@UEBAPEBDXZ",
  "xrt::runlist::execute(void)", "?execute@runlist@xrt@@QEAAXXZ",
  "xrt::runlist::poll(void)", "?poll@runlist@xrt@@QEBAHXZ",
  "xrt::runlist::reset(void)", "?reset@runlist@xrt@@QEAAXXZ",
  "xrt::runlist::runlist(const xrt::hw_context&)", "??0runlist@xrt@@QEAA@AEBVhw_context@1@@Z",
  "xrt::runlist::state(void)", "?state@runlist@xrt@@QEBA?AW4ert_cmd_state@@XZ",
  "xrt::runlist::wait(const std::chrono::milliseconds&)", "?wait@runlist@xrt@@QEBA?AW4cv_status@std@@AEBV?$duration@_JU?$ratio@$00$0DOI@@std@@@chrono@4@@Z",
  "xrt::runlist::~runlist(void)", "??1runlist@xrt@@QEAA@XZ",
  "xrt::set_read_range(const xrt::kernel&, uint32_t, uint32_t)", "?set_read_range@xrt@@YAXAEBVkernel@1@II@Z",
  "xrt::system::enumerate_devices(void)", "?enumerate_devices@system@xrt@@YAIXZ",
  "xrt::version::build(void)", "?build@version@xrt@@YAIXZ",
  "xrt::version::code(void)", "?code@version@xrt@@YAIXZ",
  "xrt::version::feature(void)", "?feature@version@xrt@@YAIXZ",
  "xrt::version::major(void)", "?major@version@xrt@@YAIXZ",
  "xrt::version::minor(void)", "?minor@version@xrt@@YAIXZ",
  "xrt::version::patch(void)", "?patch@version@xrt@@YAIXZ",
  "xrt::xclbin::aie_partition::get_inference_fingerprint(void)", "?get_inference_fingerprint@aie_partition@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::aie_partition::get_operations_per_cycle(void)", "?get_operations_per_cycle@aie_partition@xclbin@xrt@@QEBAIXZ",
  "xrt::xclbin::aie_partition::get_pre_post_fingerprint(void)", "?get_pre_post_fingerprint@aie_partition@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::arg::get_host_type(void)", "?get_host_type@arg@xclbin@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin::arg::get_index(void)", "?get_index@arg@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::arg::get_mems(void)", "?get_mems@arg@xclbin@xrt@@QEBA?AV?$vector@Vmem@xclbin@xrt@@V?$allocator@Vmem@xclbin@xrt@@@std@@@std@@XZ",
  "xrt::xclbin::arg::get_name(void)", "?get_name@arg@xclbin@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin::arg::get_offset(void)", "?get_offset@arg@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::arg::get_port(void)", "?get_port@arg@xclbin@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin::arg::get_size(void)", "?get_size@arg@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::get_aie_partitions(void)", "?get_aie_partitions@xclbin@xrt@@QEBA?AV?$vector@Vaie_partition@xclbin@xrt@@V?$allocator@Vaie_partition@xclbin@xrt@@@std@@@std@@XZ",
  "xrt::xclbin::get_axlf(void)", "?get_axlf@xclbin@xrt@@QEBAPEBUaxlf@@XZ",
  "xrt::xclbin::get_axlf_section(axlf_section_kind)", "?get_axlf_section@xclbin@xrt@@AEBA?AU?$pair@PEBD_K@std@@W4axlf_section_kind@@@Z",
  "xrt::xclbin::get_fpga_device_name(void)", "?get_fpga_device_name@xclbin@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin::get_interface_uuid(void)", "?get_interface_uuid@xclbin@xrt@@QEBA?AVuuid@2@XZ",
  "xrt::xclbin::get_ip(const std::string&)", "?get_ip@xclbin@xrt@@QEBA?AVip@12@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::xclbin::get_ips(const std::string&)", "?get_ips@xclbin@xrt@@QEBA?AV?$vector@Vip@xclbin@xrt@@V?$allocator@Vip@xclbin@xrt@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@@Z",
  "xrt::xclbin::get_ips(void)", "?get_ips@xclbin@xrt@@QEBA?AV?$vector@Vip@xclbin@xrt@@V?$allocator@Vip@xclbin@xrt@@@std@@@std@@XZ",
  "xrt::xclbin::get_kernel(const std::string&)", "?get_kernel@xclbin@xrt@@QEBA?AVkernel@12@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::xclbin::get_kernels(void)", "?get_kernels@xclbin@xrt@@QEBA?AV?$vector@Vkernel@xclbin@xrt@@V?$allocator@Vkernel@xclbin@xrt@@@std@@@std@@XZ",
  "xrt::xclbin::get_mems(void)", "?get_mems@xclbin@xrt@@QEBA?AV?$vector@Vmem@xclbin@xrt@@V?$allocator@Vmem@xclbin@xrt@@@std@@@std@@XZ",
  "xrt::xclbin::get_target_type(void)", "?get_target_type@xclbin@xrt@@QEBA?AW4target_type@12@XZ",
  "xrt::xclbin::get_uuid(void)", "?get_uuid@xclbin@xrt@@QEBA?AVuuid@2@XZ",
  "xrt::xclbin::get_xsa_name(void)", "?get_xsa_name@xclbin@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin::ip::get_arg(int32_t)", "?get_arg@ip@xclbin@xrt@@QEBA?AVarg@23@H@Z",
  "xrt::xclbin::ip::get_args(void)", "?get_args@ip@xclbin@xrt@@QEBA?AV?$vector@Varg@xclbin@xrt@@V?$allocator@Varg@xclbin@xrt@@@std@@@std@@XZ",
  "xrt::xclbin::ip::get_base_address(void)", "?get_base_address@ip@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::ip::get_control_type(void)", "?get_control_type@ip@xclbin@xrt@@QEBA?AW4control_type@123@XZ",
  "xrt::xclbin::ip::get_name(void)", "?get_name@ip@xclbin@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin::ip::get_num_args(void)", "?get_num_args@ip@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::ip::get_size(void)", "?get_size@ip@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::ip::get_type(void)", "?get_type@ip@xclbin@xrt@@QEBA?AW4ip_type@123@XZ",
  "xrt::xclbin::kernel::get_arg(int32_t)", "?get_arg@kernel@xclbin@xrt@@QEBA?AVarg@23@H@Z",
  "xrt::xclbin::kernel::get_args(void)", "?get_args@kernel@xclbin@xrt@@QEBA?AV?$vector@Varg@xclbin@xrt@@V?$allocator@Varg@xclbin@xrt@@@std@@@std@@XZ",
  "xrt::xclbin::kernel::get_cu(const std::string&)", "?get_cu@kernel@xclbin@xrt@@QEBA?AVip@23@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::xclbin::kernel::get_cus(const std::string&)", "?get_cus@kernel@xclbin@xrt@@QEBA?AV?$vector@Vip@xclbin@xrt@@V?$allocator@Vip@xclbin@xrt@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@5@@Z",
  "xrt::xclbin::kernel::get_cus(void)", "?get_cus@kernel@xclbin@xrt@@QEBA?AV?$vector@Vip@xclbin@xrt@@V?$allocator@Vip@xclbin@xrt@@@std@@@std@@XZ",
  "xrt::xclbin::kernel::get_name(void)", "?get_name@kernel@xclbin@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin::kernel::get_num_args(void)", "?get_num_args@kernel@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::kernel::get_type(void)", "?get_type@kernel@xclbin@xrt@@QEBA?AW4kernel_type@123@XZ",
  "xrt::xclbin::mem::get_base_address(void)", "?get_base_address@mem@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::mem::get_index(void)", "?get_index@mem@xclbin@xrt@@QEBAHXZ",
  "xrt::xclbin::mem::get_size_kb(void)", "?get_size_kb@mem@xclbin@xrt@@QEBA_KXZ",
  "xrt::xclbin::mem::get_tag(void)", "?get_tag@mem@xclbin@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin::mem::get_type(void)", "?get_type@mem@xclbin@xrt@@QEBA?AW4memory_type@123@XZ",
  "xrt::xclbin::mem::get_used(void)", "?get_used@mem@xclbin@xrt@@QEBA_NXZ",
  "xrt::xclbin::xclbin(const axlf*)", "??0xclbin@xrt@@QEAA@PEBUaxlf@@@Z",
  "xrt::xclbin::xclbin(const std::string&)", "??0xclbin@xrt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::xclbin::xclbin(const std::string_view&)", "??0xclbin@xrt@@QEAA@AEBV?$basic_string_view@DU?$char_traits@D@std@@@std@@@Z",
  "xrt::xclbin::xclbin(const std::vector<char>&)", "??0xclbin@xrt@@QEAA@AEBV?$vector@DV?$allocator@D@std@@@std@@@Z",
  "xrt::xclbin_repository::begin(void)", "?begin@xclbin_repository@xrt@@QEBA?AViterator@12@XZ",
  "xrt::xclbin_repository::end(void)", "?end@xclbin_repository@xrt@@QEBA?AViterator@12@XZ",
  "xrt::xclbin_repository::iterator::iterator(const xrt::xclbin_repository::iterator&)", "??0iterator@xclbin_repository@xrt@@QEAA@AEBV012@@Z",
  "xrt::xclbin_repository::iterator::operator*(void)", "??Diterator@xclbin_repository@xrt@@QEBA?AVxclbin@2@XZ",
  "xrt::xclbin_repository::iterator::operator++(int)", "??Eiterator@xclbin_repository@xrt@@QEAA?AV012@H@Z",
  "xrt::xclbin_repository::iterator::operator++(void)", "??Eiterator@xclbin_repository@xrt@@QEAAAEAV012@XZ",
  "xrt::xclbin_repository::iterator::operator->(void)", "??Citerator@xclbin_repository@xrt@@QEBA?AVxclbin@2@XZ",
  "xrt::xclbin_repository::iterator::operator==(const xrt::xclbin_repository::iterator&)", "??8iterator@xclbin_repository@xrt@@QEBA_NAEBV012@@Z",
  "xrt::xclbin_repository::iterator::path(void)", "?path@iterator@xclbin_repository@xrt@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ",
  "xrt::xclbin_repository::load(const std::string&)", "?load@xclbin_repository@xrt@@QEBA?AVxclbin@2@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::xclbin_repository::xclbin_repository(const std::string&)", "??0xclbin_repository@xrt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z",
  "xrt::xclbin_repository::xclbin_repository(void)", "??0xclbin_repository@xrt@@QEAA@XZ",
};
};

size_t
get_size_of_func_mangled_map()
{
  return sizeof(func_mangled_map)/sizeof(func_mangled_map[0]);
}
#endif
