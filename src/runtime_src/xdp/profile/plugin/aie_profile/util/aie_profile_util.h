/**
 * Copyright (C) 2022-2023 Advanced Micro Devices, Inc. - All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may
 * not use this file except in compliance with the License. A copy of the
 * License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

#ifndef AIE_TRACE_UTIL_DOT_H
#define AIE_TRACE_UTIL_DOT_H

#include <cstdint>
#include "xaiefal/xaiefal.hpp"
#include "xdp/profile/database/static_info/aie_constructs.h"

namespace xdp::aie::profile {
 
  /**
   * @brief  Check if event is generated by a stream switch monitor port
   * @param  event Event ID to check
   * @return True if given event is from a stream switch port
   */
  bool isStreamSwitchPortEvent(const XAie_Events event);

  /**
   * @brief  Check if event is a port running event
   * @param  event Event ID to check
   * @return True if given event is a port running event
   */
  bool isPortRunningEvent(const XAie_Events event);

  /**
   * @brief  Get port number from event
   * @param  event Event ID to check
   * @return Port number associated with given event
   */
  uint8_t getPortNumberFromEvent(XAie_Events event);

  /**  
   * @brief Print out usage statistics for specified tile
   * @param aieDevice AIE device
   * @param tile      Tile to analyze
   */
  void printTileStats(xaiefal::XAieDev* aieDevice, const tile_type& tile);

  /**
   * @brief Modify events in metric set based on tile type and channel number
   * @param type      Module/tile type
   * @param subtype   Subtype of module/tile (0: PLIO, 1: GMIO)
   * @param metricSet Name of requested metric set
   * @param channel   Channel number
   * @param events    Vector of events in metric set (modified if needed)
   */
  void modifyEvents(module_type type, uint16_t subtype, const std::string metricSet,
                    uint8_t channel, std::vector<XAie_Events>& events);

}  // namespace xdp::aie::profile

#endif
