/**
 * Copyright (C) 2025 Advanced Micro Devices, Inc. - All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may
 * not use this file except in compliance with the License. A copy of the
 * License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

#ifndef AIE_UTILITY_DOT_H
#define AIE_UTILITY_DOT_H

#include <cstdint>
#include <string>

extern "C" {
#include <xaiengine.h>
#include <xaiengine/xaiegbl_params.h>
}

namespace xdp::aie {

  /**
   * @brief   Check if HW generation is AIE1
   * @param   hwGen integer representing the hardware generation
   * @return  true if HW generation is AIE1
   */
  bool isAIE1(const int hwGen);

  /**
   * @brief   Check if HW generation is AIE2
   * @param   hwGen integer representing the hardware generation
   * @return  true if HW generation is AIE2
   */
  bool isAIE2(const int hwGen);

  /**
   * @brief   Check if HW generation is AIE2ps
   * @param   hwGen integer representing the hardware generation
   * @return  true if HW generation is AIE2ps
   */
  bool isAIE2ps(const int hwGen);

  /**
   * @brief   Check if HW generation is NPU3
   * @param   hwGen integer representing the hardware generation
   * @return  true if HW generation is NPU3
   */
  bool isNPU3(const int hwGen);
  
  /**
   * @brief   Check if microcontrollers are supported
   * @param   hwGen integer representing the hardware generation
   * @return  true if microcontrollers are available on specified generation
   */
  bool isMicroSupported(const int hwGen);

  /**
   * @brief  Check if metric set contains DMA events
   * @param  metricSet Name of requested metric set
   * @return True if given metric set contains DMA event(s)
   */
  bool isDmaSet(const std::string metricSet);

  /**
   * @brief  Check if event is core module event
   * @param  event Event ID to check
   * @return True if given event is from a core module
   */
  bool isCoreModuleEvent(const XAie_Events event);
 
  /**
   * @brief  Check if event is generated by a stream switch monitor port
   * @param  event Event ID to check
   * @return True if given event is from a stream switch port
   */
  bool isStreamSwitchPortEvent(const XAie_Events event);

  /**
   * @brief  Check if event is a port running event
   * @param  event Event ID to check
   * @return True if given event is a port running event
   */
  bool isPortRunningEvent(const XAie_Events event);

  /**
   * @brief  Check if event is a port stalled event
   * @param  event Event ID to check
   * @return True if given event is a port stalled event
   */
  bool isPortStalledEvent(const XAie_Events event);
 
  /**
   * @brief  Check if event is a port idle event
   * @param  event Event ID to check
   * @return True if given event is a port idle event
   */
  bool isPortIdleEvent(const XAie_Events event);
 
  /**
   * @brief  Check if event is a port tlast event
   * @param  event Event ID to check
   * @return True if given event is a port tlast event
   */
  bool isPortTlastEvent(const XAie_Events event);
 
  /**
   * @brief  Get port number from event
   * @param  event Event ID to check
   * @return Port number associated with given event (default: 0)
   */
  uint8_t getPortNumberFromEvent(const XAie_Events event);
   
  /**
   * @brief  Get channel number from event
   * @param  event Event ID to check
   * @return Channel number associated with given event (default: -1)
   */
  int8_t getChannelNumberFromEvent(XAie_Events event);

}  // namespace xdp::aie

#endif
