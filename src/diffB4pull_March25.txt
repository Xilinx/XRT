diff --git a/src/runtime_src/driver/hw_em/generic_pcie_hal2/perf.cxx b/src/runtime_src/driver/hw_em/generic_pcie_hal2/perf.cxx
index 1b17a83..b03f487 100644
--- a/src/runtime_src/driver/hw_em/generic_pcie_hal2/perf.cxx
+++ b/src/runtime_src/driver/hw_em/generic_pcie_hal2/perf.cxx
@@ -313,6 +313,7 @@ namespace xclhwemhal2 {
 
     // TODO: support other profiling
     if (type != XCL_PERF_MON_MEMORY && type != XCL_PERF_MON_ACCEL && type != XCL_PERF_MON_STR) {
+      std::cout << "Unknown IP type" << std::endl;
       traceVector.mLength = 0;
       return 0;
     }
@@ -322,11 +323,8 @@ namespace xclhwemhal2 {
       iptype = 1;
     } else if (type == XCL_PERF_MON_ACCEL) {
       iptype = 2;
-    } else if (type == XCL_PERF_MON_STR) {
+    } else { /*if (type == XCL_PERF_MON_STR) */
       iptype = 3;
-    } else {
-      std::cout << "Unknown IP type" << std::endl;
-      return 0;
     }
 
     uint32_t counter = 0;
@@ -358,11 +356,9 @@ namespace xclhwemhal2 {
             result.TraceID = counter * 2;
           } else if (iptype == 2) {
             result.TraceID = counter + 64;
-          } else if (iptype == 3) {
+          } else { /* if (iptype == 3) */
             result.TraceID = counter + 576;
-          } else {
-            return 0;
-          }
+          } 
           result.Timestamp = currentEvent.timestamp;
           result.Overflow = (currentEvent.timestamp >> 17) & 0x1;
           result.EventFlags = currentEvent.eventflags;
@@ -403,10 +399,8 @@ namespace xclhwemhal2 {
               result.TraceID = counter * 2;
             } else if (iptype == 2) {
               result.TraceID = counter + 64;
-            } else if (iptype == 3) {
+            } else { /* if (iptype == 3) */
               result.TraceID = counter + 576;
-            } else {
-              return 0;
             }
             result.Timestamp = event.timestamp();
             result.Overflow = (event.timestamp() >> 17) & 0x1;
@@ -454,10 +448,8 @@ namespace xclhwemhal2 {
               result.TraceID = counter * 2;
             } else if (iptype == 2) {
               result.TraceID = counter + 64;
-            } else if (iptype == 3) {
+            } else { /* if (iptype == 3) */
               result.TraceID = counter + 576;
-            } else {
-              return 0;
             }
             result.Timestamp = event.timestamp();
             result.Overflow = (event.timestamp() >> 17) & 0x1;
diff --git a/src/runtime_src/driver/xclng/tools/xbutil/xbutil_debug.cpp b/src/runtime_src/driver/xclng/tools/xbutil/xbutil_debug.cpp
index 7fb5c66..3c780dc 100644
--- a/src/runtime_src/driver/xclng/tools/xbutil/xbutil_debug.cpp
+++ b/src/runtime_src/driver/xclng/tools/xbutil/xbutil_debug.cpp
@@ -48,7 +48,7 @@ uint32_t xcldev::device::getIPCountAddrNames(int type,
     }
 
     debug_ip_layout *map = (debug_ip_layout *)buf.data();
-    if (buf.empty() || map->m_count < 0) {
+    if (buf.empty() || map->m_count == 0) {
         std::cout <<  "ERROR: Failed to open debug IP layout file. "
             << "Ensure that a valid xclbin is successfully downloaded. \n";
         return -EINVAL;
diff --git a/src/runtime_src/driver/xclng/xrt/user_aws/awssak_debug.cpp b/src/runtime_src/driver/xclng/xrt/user_aws/awssak_debug.cpp
index 28a8019..644fce5 100644
--- a/src/runtime_src/driver/xclng/xrt/user_aws/awssak_debug.cpp
+++ b/src/runtime_src/driver/xclng/xrt/user_aws/awssak_debug.cpp
@@ -112,6 +112,8 @@ int xcldev::device::readSPMCounters() {
     int col1 = std::max(widths.first, strlen("CU Name")) + 4;
     int col2 = std::max(widths.second, strlen("AXI Portname"));
 
+    std::ios_base::fmtflags coutFlags = std::cout.flags();  // save format flags
+
     std::cout << std::left
             << std::setw(col1) << "CU Name"
             << " " << std::setw(col2) << "AXI Portname"
@@ -140,6 +142,8 @@ int xcldev::device::readSPMCounters() {
             << "  " << std::setw(16) << debugResults.LastReadData[i]
             << std::endl;
     }
+
+    std::cout.flags(coutFlags); // restore format flags
     return 0;
 }
 
diff --git a/src/runtime_src/xdp/profile/profile.cpp b/src/runtime_src/xdp/profile/profile.cpp
index 906e1eb..f5d99a8 100644
--- a/src/runtime_src/xdp/profile/profile.cpp
+++ b/src/runtime_src/xdp/profile/profile.cpp
@@ -562,7 +562,7 @@ void cb_reset (const xocl::xclbin& xclbin)
 void
 cb_init()
 {
-  XCL::RTSingleton::Instance()->getStatus();
+  (void)XCL::RTSingleton::Instance();
 }
 
 void register_xocl_profile_callbacks() {
diff --git a/src/runtime_src/xdp/profile/profile_device/xdp_profile_results.h b/src/runtime_src/xdp/profile/profile_device/xdp_profile_results.h
index 568bf71..e69b434 100755
--- a/src/runtime_src/xdp/profile/profile_device/xdp_profile_results.h
+++ b/src/runtime_src/xdp/profile/profile_device/xdp_profile_results.h
@@ -256,7 +256,7 @@ namespace XDP {
 
   class DeviceTrace: public TimeTrace {
   public:
-    DeviceTrace()
+    DeviceTrace() : Next(nullptr), Size(0)
       {};
     ~DeviceTrace() {};
   public:
diff --git a/src/runtime_src/xdp/profile/rt_profile_results.h b/src/runtime_src/xdp/profile/rt_profile_results.h
index 56d86bb..bf864e7 100755
--- a/src/runtime_src/xdp/profile/rt_profile_results.h
+++ b/src/runtime_src/xdp/profile/rt_profile_results.h
@@ -258,7 +258,7 @@ namespace XCL {
 
   class DeviceTrace: public TimeTrace {
   public:
-    DeviceTrace()
+    DeviceTrace() : Next(nullptr), Size(0)
       {};
     ~DeviceTrace() {};
   public:
diff --git a/src/runtime_src/xdp/profile/rt_profile_writers.cpp b/src/runtime_src/xdp/profile/rt_profile_writers.cpp
index b05a7f8..0f4077f 100755
--- a/src/runtime_src/xdp/profile/rt_profile_writers.cpp
+++ b/src/runtime_src/xdp/profile/rt_profile_writers.cpp
@@ -1281,9 +1281,15 @@ namespace XCL {
       size_t ddrSize = device_id->get_ddr_size();
       size_t bankSize = ddrSize / ddrBanks;
       ofs << "DDR Banks,begin\n";
-      for (unsigned int b=0; b < ddrBanks; ++b)
-        ofs << "Bank," << std::dec << b << ","
-		    << (boost::format("0X%09x") % (b * bankSize)) << std::endl;
+      for (unsigned int b=0; b < ddrBanks; ++b) {
+        ofs << "Bank," << std::dec << b << ",";
+        try {
+          ofs << (boost::format("0X%09x") % (b * bankSize)) << std::endl;
+        } catch (std::exception &err) {
+          // If there is a boost::format_error while writing address of DDR Bank, then write out a default value
+          ofs << "0X000000000" << std::endl;
+        }
+      }
       ofs << "DDR Banks,end\n";
 
 #if 0
diff --git a/src/runtime_src/xdp/profile/rt_profile_xocl.cpp b/src/runtime_src/xdp/profile/rt_profile_xocl.cpp
index d5cab0b..27f5576 100644
--- a/src/runtime_src/xdp/profile/rt_profile_xocl.cpp
+++ b/src/runtime_src/xdp/profile/rt_profile_xocl.cpp
@@ -688,7 +688,13 @@ logCounters(key k, xclPerfMonType type, bool firstReadAfterProgram, bool forceRe
     
     // Create unique name for device since currently all devices are called fpga0
     std::string device_name = device->get_unique_name();
-    std::string binary_name = device->get_xclbin().project_name();
+    std::string binary_name;
+    try {
+      binary_name = device->get_xclbin().project_name();
+    } catch (...) {
+      std::cout << " Error while retrieving project name from xclbin for use in logCounters. Using default name \"binary\" ." << std::endl;
+      binary_name = "binary";
+    }
 
     XCL::RTSingleton::Instance()->getProfileManager()->logDeviceCounters(device_name, binary_name, type, data->mCounterResults,
                                                                          timeNsec, firstReadAfterProgram);
